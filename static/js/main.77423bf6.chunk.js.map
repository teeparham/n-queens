{"version":3,"sources":["Board.tsx","Queen.tsx","Loading.tsx","Container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","Queen","src","className","alt","Board","Array","this","props","nQueens","fill","No","from","length","blankRow","board","row","column","j","Yes","i","valid","place","blank","map","cell","renderCell","solve","renderRow","solution","React","Component","Loading","queens","n","Container","state","delta","setState","onClick","increment","App","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77423bf6.chunk.js","sourcesContent":["import React from 'react'\nimport Queen from './Queen'\n\nenum Cell {No, Yes}\ntype Row = Array<Cell>;\ntype Props = { nQueens: number };\n\nexport default class Board extends React.Component<Props, {}> {\n  blankRow() {\n    return new Array<Cell>(this.props.nQueens).fill(Cell.No);\n  }\n\n  blank() {\n    return Array.from({length: this.props.nQueens}, () => (this.blankRow()));\n  }\n\n  valid(board: Array<Row>, row: number, column: number): boolean {\n    // queen in row?\n    for (let j = 0; j < column; j++) {\n      if (board[row][j] === Cell.Yes) {\n        return false;\n      }\n    }\n\n    // queen on upper diagonal?\n    for (let i = row, j = column; i >= 0 && j >= 0; i--, j-- ) {\n      if (board[i][j] === Cell.Yes) {\n        return false;\n      }\n    }\n\n    // queen on lower diagonal?\n    for (let i = row, j = column; i < this.props.nQueens && j >= 0; i++, j-- ) {\n      if (board[i][j] === Cell.Yes) {\n        return false;\n      }\n    }\n\n    // ok!\n    return true;\n  }\n\n  place(board: Array<Row>, column: number) {\n    if (column === this.props.nQueens) {\n      return true; // solved!\n    }\n    for (let row = 0; row < this.props.nQueens; row++) {\n      if (this.valid(board, row, column)) {\n        board[row][column] = Cell.Yes;\n\n        // solve for next column\n        if (this.place(board, column + 1)) {\n          return true;\n        }\n\n        // backtrack - above placement didn't work\n        board[row][column] = Cell.No;\n      }\n\n    }\n    return false; // nope\n  }\n\n  solve() {\n    let board = this.blank();\n    this.place(board, 0);\n    return board;\n  }\n\n  static renderCell(cell: Cell) {\n    if (cell === Cell.No) {\n      return(<span className=\"dib w2 h2\">o</span>)\n    } else {\n      return(<span className=\"dib w2 h2\"><img src=\"logo.png\" className=\"di h2 w2\" alt=\"queen\" /></span>)\n    }\n  }\n\n  renderRow(row: Row) {\n    return(\n      <div className=\"\">\n        {row.map((cell) => Board.renderCell(cell))}\n      </div>\n    );\n  }\n\n  solution() {\n    return(\n      <div>\n        <h4 className=\"mb2\">A solution</h4>\n        <div className=\"bg-white-20 ba br3 b--black-50\">\n          {this.solve().map((row) => this.renderRow(row))}\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    if (this.props.nQueens === 1) {\n      return(<div><h4 className=\"mb2 green\">The solution</h4><Queen /></div>)\n    }\n    else if (this.props.nQueens === 2 || this.props.nQueens === 3) {\n      return(<p className=\"red\">Impossible!</p>)\n    }\n    else return this.solution();\n  }\n}\n\n","import React from \"react\";\n\nconst Queen: React.FunctionComponent<{}> = () => {\n  return(\n    <img src=\"logo.png\" className=\"di mh2 h2 w2\" alt=\"queen\" />\n  )\n};\n\nexport default Queen;\n","import React from \"react\";\n\nconst Loading: React.FunctionComponent<{ n: number }> = (props) => {\n  const queens = [...Array(props.n)].map(() =>\n    <img src=\"logo.png\" className=\"logo di mh2\" alt=\"logo\" />\n  );\n\n  return(\n    <div className=\"mb3\">\n      {queens}\n    </div>\n  )\n};\n\nexport default Loading;\n","import React from 'react'\nimport Board from './Board'\nimport Loading from './Loading'\n\ntype State = { nQueens: number };\n\nexport default class Container extends React.Component<{}, State> {\n  state = { nQueens: 1 };\n\n  increment(delta: number) {\n    this.setState(state => {\n      let n = state.nQueens + delta;\n      if (n < 1) { n = 1 }\n      return { nQueens: n }\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <Loading n={this.state.nQueens} />\n        <div className=\"db mv2\">\n          <span className=\"pointer br-pill ba bw2 ph4 pv3 mb2 ml1 mr3 dib v-mid white b f2 bg-green usn\"\n                onClick={() => this.increment(1)} >+</span>\n          <span className=\"pointer br-pill ba bw2 ph4 pv3 mb2 mh1 dib v-mid white b f2 bg-red usn\"\n                onClick={() => this.increment(-1)} >-</span>\n        </div>\n        <Board nQueens={this.state.nQueens} />\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport './App.css';\nimport Container from './Container';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App bg-black-80\">\n      <link rel=\"stylesheet\" href=\"https://unpkg.com/tachyons@4.10.0/css/tachyons.min.css\"/>\n      <header className=\"\">\n        <h1>N Queens</h1>\n      </header>\n      <Container />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}